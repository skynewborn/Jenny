#parse("templates/notice.vm")
#include <jni.h>

#include "jnigen/jni_helper.h"
#if ($hasProxy)
#include "jnigen/proxy/proxy_reg.h"
#end

#foreach ($cls in $nativeClasses)
#include "jnigen/jni/${cls.headerFileName}"
#end
#[[
#ifdef __cplusplus
extern "C" {
#endif
]]#
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    jenny::Env::attachJvm(vm);

    JNIEnv *env = jenny::Env().get();
    auto ok =
#foreach ($cls in $nativeClasses)
        $cls.namespace::$cls.name::registerNativeFunctions(env)#if ($foreach.hasNext) &&
#else;#end
#end

#if ($hasProxy)
    if (ok) ok = jenny::initAllProxies(env);
#end
    assert(ok);

    return JNI_VERSION_1_6;
}

JNIEXPORT void JNICALL JNI_OnUnLoad(JavaVM *vm, void *reserved) {
#if ($hasProxy)
    JNIEnv *env = jenny::Env().get();
    jenny::releaseAllProxies(env);
#end
}
#[[
#ifdef __cplusplus
}
#endif
]]#
