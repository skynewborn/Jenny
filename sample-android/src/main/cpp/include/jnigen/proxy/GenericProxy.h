/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#include <jni.h>
#include <assert.h>
#include <atomic>
#include <mutex>

#include "jnigen/jni_helper.h"

// external logger function
void jennySampleErrorLog(JNIEnv* env, const char* error);


class GenericProxy {

public:
    static constexpr auto FULL_CLASS_NAME = u8"io/github/landerlyoung/jennysampleapp/Generic";


public:
    static bool initClazz(JNIEnv* env);

    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    // construct: public Generic()
    static jobject newInstance(JNIEnv* env) {
        assertInited(env);
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0);
    }

    // method: public final T getAndRet(T t)
    static jobject getAndRet(JNIEnv* env, jobject thiz, jobject t) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_getAndRet_0, t);
    }

    // method: public final void genericParam(R r)
    static void genericParam__Ljava_lang_Object_2(JNIEnv* env, jobject thiz, jobject r) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParam_0, r);
    }

    // method: public final void genericParam(io.github.landerlyoung.jennysampleapp.Generic<java.lang.Runnable> t)
    static void genericParam__Lio_github_landerlyoung_jennysampleapp_Generic_2(JNIEnv* env, jobject thiz, jobject t) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParam_1, t);
    }

    // method: public final void genericParamMultiUpperBounds(R r)
    static void genericParamMultiUpperBounds(JNIEnv* env, jobject thiz, jobject r) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParamMultiUpperBounds_0, r);
    }

    // method: public final void genericParam2(io.github.landerlyoung.jennysampleapp.Generic<java.util.concurrent.FutureTask<java.lang.Object>> t)
    static void genericParam2(JNIEnv* env, jobject thiz, jobject t) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParam2_0, t);
    }

    // method: public final void genericParam3(io.github.landerlyoung.jennysampleapp.Generic<R> t)
    static void genericParam3(JNIEnv* env, jobject thiz, jobject t) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParam3_0, t);
    }

    // method: public final void genericParam4(java.util.Collection<? extends java.lang.Runnable> t)
    static void genericParam4(JNIEnv* env, jobject thiz, jobject t) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParam4_0, t);
    }

    // method: public final void array(int[] ia)
    static void array(JNIEnv* env, jobject thiz, jintArray ia) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_array_0, ia);
    }

    // method: public final void array(int[][] ia)
    static void array(JNIEnv* env, jobject thiz, jobjectArray ia) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_array_1, ia);
    }



private:
    ::jenny::LocalRef<jobject> _local;
    ::jenny::GlobalRef<jobject> _global;

public:
    ::jenny::LocalRef<jobject> getThis(bool owned = true) const {
        if (_local) {
            if (owned) {
                return _local;
            } else {
                return ::jenny::LocalRef<jobject>(_local.get(), false);
            }
        } else {
            return _global.toLocal();
        }
    }

    // jni helper constructors
    GenericProxy(jobject ref, bool owned = false): _local(ref, owned) {
       assertInited(::jenny::Env().get());
    }

    GenericProxy(::jenny::LocalRef<jobject> ref): _local(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    GenericProxy(::jenny::GlobalRef<jobject> ref): _global(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    // construct: public Generic()
    static GenericProxy newInstance() {
        ::jenny::Env env;
        assertInited(env.get());
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0);
    }

    // method: public final T getAndRet(T t)
    ::jenny::LocalRef<jobject> getAndRet(const ::jenny::LocalRef<jobject>& t) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_getAndRet_0, t.get()));
    }

    // method: public final void genericParam(R r)
    void genericParam__Ljava_lang_Object_2(const ::jenny::LocalRef<jobject>& r) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParam_0, r.get());
    }

    // method: public final void genericParam(io.github.landerlyoung.jennysampleapp.Generic<java.lang.Runnable> t)
    void genericParam__Lio_github_landerlyoung_jennysampleapp_Generic_2(const ::jenny::LocalRef<jobject>& t) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParam_1, t.get());
    }

    // method: public final void genericParamMultiUpperBounds(R r)
    void genericParamMultiUpperBounds(const ::jenny::LocalRef<jobject>& r) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParamMultiUpperBounds_0, r.get());
    }

    // method: public final void genericParam2(io.github.landerlyoung.jennysampleapp.Generic<java.util.concurrent.FutureTask<java.lang.Object>> t)
    void genericParam2(const ::jenny::LocalRef<jobject>& t) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParam2_0, t.get());
    }

    // method: public final void genericParam3(io.github.landerlyoung.jennysampleapp.Generic<R> t)
    void genericParam3(const ::jenny::LocalRef<jobject>& t) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParam3_0, t.get());
    }

    // method: public final void genericParam4(java.util.Collection<? extends java.lang.Runnable> t)
    void genericParam4(const ::jenny::LocalRef<jobject>& t) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_genericParam4_0, t.get());
    }

    // method: public final void array(int[] ia)
    void array(const ::jenny::LocalRef<jintArray>& ia) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_array_0, ia.get());
    }

    // method: public final void array(int[][] ia)
    void array(const ::jenny::LocalRef<jobjectArray>& ia) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_array_1, ia.get());
    }



private:
    struct ClassInitState {
        // thread safe init
        std::atomic_bool sInited {};
        std::mutex sInitLock {};
        jclass sClazz = nullptr;

        jmethodID sConstruct_0 = nullptr;

        jmethodID sMethod_getAndRet_0 = nullptr;
        jmethodID sMethod_genericParam_0 = nullptr;
        jmethodID sMethod_genericParam_1 = nullptr;
        jmethodID sMethod_genericParamMultiUpperBounds_0 = nullptr;
        jmethodID sMethod_genericParam2_0 = nullptr;
        jmethodID sMethod_genericParam3_0 = nullptr;
        jmethodID sMethod_genericParam4_0 = nullptr;
        jmethodID sMethod_array_0 = nullptr;
        jmethodID sMethod_array_1 = nullptr;

    }; // endof struct ClassInitState

    static inline ClassInitState& getClassInitState() {
        static ClassInitState classInitState;
        return classInitState;
    }

};


/*static*/ inline bool GenericProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init GenericProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (!state.sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(state.sClazz);

            state.sConstruct_0 = env->GetMethodID(state.sClazz, "<init>", "()V");
            JENNY_CHECK_NULL(state.sConstruct_0);

            state.sMethod_getAndRet_0 = env->GetMethodID(state.sClazz, "getAndRet", "(Ljava/lang/Runnable;)Ljava/lang/Runnable;");
            JENNY_CHECK_NULL(state.sMethod_getAndRet_0);
            state.sMethod_genericParam_0 = env->GetMethodID(state.sClazz, "genericParam", "(Ljava/lang/Object;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParam_0);
            state.sMethod_genericParam_1 = env->GetMethodID(state.sClazz, "genericParam", "(Lio/github/landerlyoung/jennysampleapp/Generic;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParam_1);
            state.sMethod_genericParamMultiUpperBounds_0 = env->GetMethodID(state.sClazz, "genericParamMultiUpperBounds", "(Ljava/lang/Runnable;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParamMultiUpperBounds_0);
            state.sMethod_genericParam2_0 = env->GetMethodID(state.sClazz, "genericParam2", "(Lio/github/landerlyoung/jennysampleapp/Generic;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParam2_0);
            state.sMethod_genericParam3_0 = env->GetMethodID(state.sClazz, "genericParam3", "(Lio/github/landerlyoung/jennysampleapp/Generic;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParam3_0);
            state.sMethod_genericParam4_0 = env->GetMethodID(state.sClazz, "genericParam4", "(Ljava/util/Collection;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParam4_0);
            state.sMethod_array_0 = env->GetMethodID(state.sClazz, "array", "([I)V");
            JENNY_CHECK_NULL(state.sMethod_array_0);
            state.sMethod_array_1 = env->GetMethodID(state.sClazz, "array", "([[I)V");
            JENNY_CHECK_NULL(state.sMethod_array_1);


            state.sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ inline void GenericProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (state.sInited) {
            env->DeleteGlobalRef(state.sClazz);
            state.sClazz = nullptr;
            state.sInited = false;
        }
    }
}


