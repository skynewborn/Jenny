/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#include <jni.h>
#include <assert.h>
#include <atomic>
#include <mutex>

#include "jnigen/jni_helper.h"

// external logger function
void jennySampleErrorLog(JNIEnv* env, const char* error);


namespace android {
class StyleProxy {

public:
    static constexpr auto FULL_CLASS_NAME = u8"android/graphics/Paint$Style";


public:
    static bool initClazz(JNIEnv* env);

    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }


    // method: public static android.graphics.Paint.Style[] values()
    static jobjectArray values(JNIEnv* env) {
        assertInited(env);
        return reinterpret_cast<jobjectArray>(env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_values_0));
    }

    // method: public static android.graphics.Paint.Style valueOf(java.lang.String name)
    static jobject valueOf(JNIEnv* env, jstring name) {
        assertInited(env);
        return env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_valueOf_0, name);
    }


    // field: public static final android.graphics.Paint.Style FILL
    static jobject getFILL(JNIEnv* env) {
        assertInited(env);
        return env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_0);
    }

    // field: public static final android.graphics.Paint.Style FILL
    static void setFILL(JNIEnv* env, jobject FILL) {
        assertInited(env);
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_0, FILL);
    }

    // field: public static final android.graphics.Paint.Style STROKE
    static jobject getSTROKE(JNIEnv* env) {
        assertInited(env);
        return env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_STROKE_1);
    }

    // field: public static final android.graphics.Paint.Style STROKE
    static void setSTROKE(JNIEnv* env, jobject STROKE) {
        assertInited(env);
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_STROKE_1, STROKE);
    }

    // field: public static final android.graphics.Paint.Style FILL_AND_STROKE
    static jobject getFILL_AND_STROKE(JNIEnv* env) {
        assertInited(env);
        return env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_AND_STROKE_2);
    }

    // field: public static final android.graphics.Paint.Style FILL_AND_STROKE
    static void setFILL_AND_STROKE(JNIEnv* env, jobject FILL_AND_STROKE) {
        assertInited(env);
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_AND_STROKE_2, FILL_AND_STROKE);
    }


private:
    ::jenny::LocalRef<jobject> _local;
    ::jenny::GlobalRef<jobject> _global;

public:
    ::jenny::LocalRef<jobject> getThis(bool owned = true) const {
        if (_local) {
            if (owned) {
                return _local;
            } else {
                return ::jenny::LocalRef<jobject>(_local.get(), false);
            }
        } else {
            return _global.toLocal();
        }
    }

    // jni helper constructors
    StyleProxy(jobject ref, bool owned = false): _local(ref, owned) {
       assertInited(::jenny::Env().get());
    }

    StyleProxy(::jenny::LocalRef<jobject> ref): _local(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    StyleProxy(::jenny::GlobalRef<jobject> ref): _global(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }


    // method: public static android.graphics.Paint.Style[] values()
    static ::jenny::LocalRef<jobjectArray> values() {
        ::jenny::Env env;
        assertInited(env.get());
        return ::jenny::LocalRef<jobjectArray>(reinterpret_cast<jobjectArray>(env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_values_0)));
    }

    // method: public static android.graphics.Paint.Style valueOf(java.lang.String name)
    static ::jenny::LocalRef<jobject> valueOf(const ::jenny::LocalRef<jstring>& name) {
        ::jenny::Env env;
        assertInited(env.get());
        return ::jenny::LocalRef<jobject>(env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_valueOf_0, name.get()));
    }


    // field: public static final android.graphics.Paint.Style FILL
    static ::jenny::LocalRef<jobject> getFILL() {
        ::jenny::Env env;
        assertInited(env.get());
        return ::jenny::LocalRef<jobject>(env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_0));
    }

    // field: public static final android.graphics.Paint.Style FILL
    static void setFILL(const ::jenny::LocalRef<jobject>& FILL) {
        ::jenny::Env env;
        assertInited(env.get());
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_0, FILL.get());
    }

    // field: public static final android.graphics.Paint.Style STROKE
    static ::jenny::LocalRef<jobject> getSTROKE() {
        ::jenny::Env env;
        assertInited(env.get());
        return ::jenny::LocalRef<jobject>(env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_STROKE_1));
    }

    // field: public static final android.graphics.Paint.Style STROKE
    static void setSTROKE(const ::jenny::LocalRef<jobject>& STROKE) {
        ::jenny::Env env;
        assertInited(env.get());
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_STROKE_1, STROKE.get());
    }

    // field: public static final android.graphics.Paint.Style FILL_AND_STROKE
    static ::jenny::LocalRef<jobject> getFILL_AND_STROKE() {
        ::jenny::Env env;
        assertInited(env.get());
        return ::jenny::LocalRef<jobject>(env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_AND_STROKE_2));
    }

    // field: public static final android.graphics.Paint.Style FILL_AND_STROKE
    static void setFILL_AND_STROKE(const ::jenny::LocalRef<jobject>& FILL_AND_STROKE) {
        ::jenny::Env env;
        assertInited(env.get());
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_AND_STROKE_2, FILL_AND_STROKE.get());
    }


private:
    struct ClassInitState {
        // thread safe init
        std::atomic_bool sInited {};
        std::mutex sInitLock {};
        jclass sClazz = nullptr;


        jmethodID sMethod_values_0 = nullptr;
        jmethodID sMethod_valueOf_0 = nullptr;

        jfieldID sField_FILL_0 = nullptr;
        jfieldID sField_STROKE_1 = nullptr;
        jfieldID sField_FILL_AND_STROKE_2 = nullptr;
    }; // endof struct ClassInitState

    static inline ClassInitState& getClassInitState() {
        static ClassInitState classInitState;
        return classInitState;
    }

};


/*static*/ inline bool StyleProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init StyleProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (!state.sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(state.sClazz);


            state.sMethod_values_0 = env->GetStaticMethodID(state.sClazz, "values", "()[Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(state.sMethod_values_0);
            state.sMethod_valueOf_0 = env->GetStaticMethodID(state.sClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(state.sMethod_valueOf_0);

            state.sField_FILL_0 = env->GetStaticFieldID(state.sClazz, "FILL", "Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(state.sField_FILL_0);
            state.sField_STROKE_1 = env->GetStaticFieldID(state.sClazz, "STROKE", "Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(state.sField_STROKE_1);
            state.sField_FILL_AND_STROKE_2 = env->GetStaticFieldID(state.sClazz, "FILL_AND_STROKE", "Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(state.sField_FILL_AND_STROKE_2);

            state.sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ inline void StyleProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (state.sInited) {
            env->DeleteGlobalRef(state.sClazz);
            state.sClazz = nullptr;
            state.sInited = false;
        }
    }
}


} // end of namespace android
