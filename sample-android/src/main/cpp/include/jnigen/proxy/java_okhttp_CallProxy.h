/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#include <jni.h>
#include <assert.h>
#include <atomic>
#include <mutex>

#include "jnigen/jni_helper.h"

// external logger function
void jennySampleErrorLog(JNIEnv* env, const char* error);


namespace java {
namespace okhttp {
class CallProxy {

public:
    static constexpr auto FULL_CLASS_NAME = u8"okhttp3/Call";


public:
    static bool initClazz(JNIEnv* env);

    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }


    // method: public abstract okhttp3.Request request()
    static jobject request(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_request_0);
    }

    // method: public abstract okhttp3.Response execute()
    static jobject execute(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_execute_0);
    }

    // method: public abstract void enqueue(okhttp3.Callback arg0)
    static void enqueue(JNIEnv* env, jobject thiz, jobject arg0) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_enqueue_0, arg0);
    }

    // method: public abstract void cancel()
    static void cancel(JNIEnv* env, jobject thiz) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_cancel_0);
    }

    // method: public abstract boolean isExecuted()
    static jboolean isExecuted(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_isExecuted_0);
    }

    // method: public abstract boolean isCanceled()
    static jboolean isCanceled(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_isCanceled_0);
    }

    // method: public abstract okio.Timeout timeout()
    static jobject timeout(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_timeout_0);
    }

    // method: public abstract okhttp3.Call clone()
    static jobject clone(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_clone_0);
    }



private:
    ::jenny::LocalRef<jobject> _local;
    ::jenny::GlobalRef<jobject> _global;

public:
    ::jenny::LocalRef<jobject> getThis(bool owned = true) const {
        if (_local) {
            if (owned) {
                return _local;
            } else {
                return ::jenny::LocalRef<jobject>(_local.get(), false);
            }
        } else {
            return _global.toLocal();
        }
    }

    // jni helper constructors
    CallProxy(jobject ref, bool owned = false): _local(ref, owned) {
       assertInited(::jenny::Env().get());
    }

    CallProxy(::jenny::LocalRef<jobject> ref): _local(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    CallProxy(::jenny::GlobalRef<jobject> ref): _global(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }


    // method: public abstract okhttp3.Request request()
    ::jenny::LocalRef<jobject> request() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_request_0));
    }

    // method: public abstract okhttp3.Response execute()
    ::jenny::LocalRef<jobject> execute() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_execute_0));
    }

    // method: public abstract void enqueue(okhttp3.Callback arg0)
    void enqueue(const ::jenny::LocalRef<jobject>& arg0) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_enqueue_0, arg0.get());
    }

    // method: public abstract void cancel()
    void cancel() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_cancel_0);
    }

    // method: public abstract boolean isExecuted()
    jboolean isExecuted() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_isExecuted_0);
    }

    // method: public abstract boolean isCanceled()
    jboolean isCanceled() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_isCanceled_0);
    }

    // method: public abstract okio.Timeout timeout()
    ::jenny::LocalRef<jobject> timeout() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_timeout_0));
    }

    // method: public abstract okhttp3.Call clone()
    ::jenny::LocalRef<jobject> clone() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_clone_0));
    }



private:
    struct ClassInitState {
        // thread safe init
        std::atomic_bool sInited {};
        std::mutex sInitLock {};
        jclass sClazz = nullptr;


        jmethodID sMethod_request_0 = nullptr;
        jmethodID sMethod_execute_0 = nullptr;
        jmethodID sMethod_enqueue_0 = nullptr;
        jmethodID sMethod_cancel_0 = nullptr;
        jmethodID sMethod_isExecuted_0 = nullptr;
        jmethodID sMethod_isCanceled_0 = nullptr;
        jmethodID sMethod_timeout_0 = nullptr;
        jmethodID sMethod_clone_0 = nullptr;

    }; // endof struct ClassInitState

    static inline ClassInitState& getClassInitState() {
        static ClassInitState classInitState;
        return classInitState;
    }

};


/*static*/ inline bool CallProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init CallProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (!state.sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(state.sClazz);


            state.sMethod_request_0 = env->GetMethodID(state.sClazz, "request", "()Lokhttp3/Request;");
            JENNY_CHECK_NULL(state.sMethod_request_0);
            state.sMethod_execute_0 = env->GetMethodID(state.sClazz, "execute", "()Lokhttp3/Response;");
            JENNY_CHECK_NULL(state.sMethod_execute_0);
            state.sMethod_enqueue_0 = env->GetMethodID(state.sClazz, "enqueue", "(Lokhttp3/Callback;)V");
            JENNY_CHECK_NULL(state.sMethod_enqueue_0);
            state.sMethod_cancel_0 = env->GetMethodID(state.sClazz, "cancel", "()V");
            JENNY_CHECK_NULL(state.sMethod_cancel_0);
            state.sMethod_isExecuted_0 = env->GetMethodID(state.sClazz, "isExecuted", "()Z");
            JENNY_CHECK_NULL(state.sMethod_isExecuted_0);
            state.sMethod_isCanceled_0 = env->GetMethodID(state.sClazz, "isCanceled", "()Z");
            JENNY_CHECK_NULL(state.sMethod_isCanceled_0);
            state.sMethod_timeout_0 = env->GetMethodID(state.sClazz, "timeout", "()Lokio/Timeout;");
            JENNY_CHECK_NULL(state.sMethod_timeout_0);
            state.sMethod_clone_0 = env->GetMethodID(state.sClazz, "clone", "()Lokhttp3/Call;");
            JENNY_CHECK_NULL(state.sMethod_clone_0);


            state.sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ inline void CallProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (state.sInited) {
            env->DeleteGlobalRef(state.sClazz);
            state.sClazz = nullptr;
            state.sInited = false;
        }
    }
}


} // end of namespace java
} // end of namespace okhttp
