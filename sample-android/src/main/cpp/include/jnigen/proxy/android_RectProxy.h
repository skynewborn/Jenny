/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#include <jni.h>
#include <assert.h>
#include <atomic>
#include <mutex>

#include "jnigen/jni_helper.h"

// external logger function
void jennySampleErrorLog(JNIEnv* env, const char* error);


namespace android {
class RectProxy {

public:
    static constexpr auto FULL_CLASS_NAME = u8"android/graphics/Rect";


public:
    static bool initClazz(JNIEnv* env);

    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    // construct: public Rect()
    static jobject newInstance(JNIEnv* env) {
        assertInited(env);
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0);
    }
    // construct: public Rect(int left, int top, int right, int bottom)
    static jobject newInstance(JNIEnv* env, jint left, jint top, jint right, jint bottom) {
        assertInited(env);
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_1, left, top, right, bottom);
    }
    // construct: public Rect(android.graphics.Rect r)
    static jobject newInstance(JNIEnv* env, jobject r) {
        assertInited(env);
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_2, r);
    }

    // method: public boolean equals(java.lang.Object o)
    static jboolean equals(JNIEnv* env, jobject thiz, jobject o) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_equals_0, o);
    }

    // method: public int hashCode()
    static jint hashCode(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_hashCode_0);
    }

    // method: public java.lang.String toString()
    static jstring toString(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_toString_0));
    }

    // method: public java.lang.String toShortString()
    static jstring toShortString(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_toShortString_0));
    }

    // method: public java.lang.String flattenToString()
    static jstring flattenToString(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_flattenToString_0));
    }

    // method: public static android.graphics.Rect unflattenFromString(java.lang.String str)
    static jobject unflattenFromString(JNIEnv* env, jstring str) {
        assertInited(env);
        return env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_unflattenFromString_0, str);
    }

    // method: public boolean isEmpty()
    static jboolean isEmpty(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_isEmpty_0);
    }

    // method: public int width()
    static jint width(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_width_0);
    }

    // method: public int height()
    static jint height(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_height_0);
    }

    // method: public int centerX()
    static jint centerX(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_centerX_0);
    }

    // method: public int centerY()
    static jint centerY(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_centerY_0);
    }

    // method: public float exactCenterX()
    static jfloat exactCenterX(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallFloatMethod(thiz, getClassInitState().sMethod_exactCenterX_0);
    }

    // method: public float exactCenterY()
    static jfloat exactCenterY(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallFloatMethod(thiz, getClassInitState().sMethod_exactCenterY_0);
    }

    // method: public void setEmpty()
    static void setEmpty(JNIEnv* env, jobject thiz) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_setEmpty_0);
    }

    // method: public void set(int left, int top, int right, int bottom)
    static void set(JNIEnv* env, jobject thiz, jint left, jint top, jint right, jint bottom) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_set_0, left, top, right, bottom);
    }

    // method: public void set(android.graphics.Rect src)
    static void set(JNIEnv* env, jobject thiz, jobject src) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_set_1, src);
    }

    // method: public void offset(int dx, int dy)
    static void offset(JNIEnv* env, jobject thiz, jint dx, jint dy) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_offset_0, dx, dy);
    }

    // method: public void offsetTo(int newLeft, int newTop)
    static void offsetTo(JNIEnv* env, jobject thiz, jint newLeft, jint newTop) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_offsetTo_0, newLeft, newTop);
    }

    // method: public void inset(int dx, int dy)
    static void inset(JNIEnv* env, jobject thiz, jint dx, jint dy) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_inset_0, dx, dy);
    }

    // method: public void inset(android.graphics.Insets insets)
    static void inset(JNIEnv* env, jobject thiz, jobject insets) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_inset_1, insets);
    }

    // method: public void inset(int left, int top, int right, int bottom)
    static void inset(JNIEnv* env, jobject thiz, jint left, jint top, jint right, jint bottom) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_inset_2, left, top, right, bottom);
    }

    // method: public boolean contains(int x, int y)
    static jboolean contains(JNIEnv* env, jobject thiz, jint x, jint y) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_contains_0, x, y);
    }

    // method: public boolean contains(int left, int top, int right, int bottom)
    static jboolean contains(JNIEnv* env, jobject thiz, jint left, jint top, jint right, jint bottom) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_contains_1, left, top, right, bottom);
    }

    // method: public boolean contains(android.graphics.Rect r)
    static jboolean contains(JNIEnv* env, jobject thiz, jobject r) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_contains_2, r);
    }

    // method: public boolean intersect(int left, int top, int right, int bottom)
    static jboolean intersect(JNIEnv* env, jobject thiz, jint left, jint top, jint right, jint bottom) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_intersect_0, left, top, right, bottom);
    }

    // method: public boolean intersect(android.graphics.Rect r)
    static jboolean intersect(JNIEnv* env, jobject thiz, jobject r) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_intersect_1, r);
    }

    // method: public boolean setIntersect(android.graphics.Rect a, android.graphics.Rect b)
    static jboolean setIntersect(JNIEnv* env, jobject thiz, jobject a, jobject b) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_setIntersect_0, a, b);
    }

    // method: public boolean intersects(int left, int top, int right, int bottom)
    static jboolean intersects(JNIEnv* env, jobject thiz, jint left, jint top, jint right, jint bottom) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_intersects_0, left, top, right, bottom);
    }

    // method: public static boolean intersects(android.graphics.Rect a, android.graphics.Rect b)
    static jboolean intersects(JNIEnv* env, jobject a, jobject b) {
        assertInited(env);
        return env->CallStaticBooleanMethod(getClassInitState().sClazz, getClassInitState().sMethod_intersects_1, a, b);
    }

    // method: public void union(int left, int top, int right, int bottom)
    static void union__IIII(JNIEnv* env, jobject thiz, jint left, jint top, jint right, jint bottom) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_union_0, left, top, right, bottom);
    }

    // method: public void union(android.graphics.Rect r)
    static void union__Landroid_graphics_Rect_2(JNIEnv* env, jobject thiz, jobject r) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_union_1, r);
    }

    // method: public void union(int x, int y)
    static void union__II(JNIEnv* env, jobject thiz, jint x, jint y) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_union_2, x, y);
    }

    // method: public void sort()
    static void sort(JNIEnv* env, jobject thiz) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_sort_0);
    }

    // method: public int describeContents()
    static jint describeContents(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_describeContents_0);
    }

    // method: public void writeToParcel(android.os.Parcel out, int flags)
    static void writeToParcel(JNIEnv* env, jobject thiz, jobject out, jint flags) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_writeToParcel_0, out, flags);
    }

    // method: public void readFromParcel(android.os.Parcel in)
    static void readFromParcel(JNIEnv* env, jobject thiz, jobject in) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_readFromParcel_0, in);
    }


    // field: public static final android.os.Parcelable.Creator<android.graphics.Rect> CREATOR
    static jobject getCREATOR(JNIEnv* env) {
        assertInited(env);
        return env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_CREATOR_0);
    }

    // field: public static final android.os.Parcelable.Creator<android.graphics.Rect> CREATOR
    static void setCREATOR(JNIEnv* env, jobject CREATOR) {
        assertInited(env);
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_CREATOR_0, CREATOR);
    }

    // field: public int bottom
    static jint getBottom(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->GetIntField(thiz, getClassInitState().sField_bottom_1);
    }

    // field: public int bottom
    static void setBottom(JNIEnv* env, jobject thiz, jint bottom) {
        assertInited(env);
        env->SetIntField(thiz, getClassInitState().sField_bottom_1, bottom);
    }

    // field: public int left
    static jint getLeft(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->GetIntField(thiz, getClassInitState().sField_left_2);
    }

    // field: public int left
    static void setLeft(JNIEnv* env, jobject thiz, jint left) {
        assertInited(env);
        env->SetIntField(thiz, getClassInitState().sField_left_2, left);
    }

    // field: public int right
    static jint getRight(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->GetIntField(thiz, getClassInitState().sField_right_3);
    }

    // field: public int right
    static void setRight(JNIEnv* env, jobject thiz, jint right) {
        assertInited(env);
        env->SetIntField(thiz, getClassInitState().sField_right_3, right);
    }

    // field: public int top
    static jint getTop(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->GetIntField(thiz, getClassInitState().sField_top_4);
    }

    // field: public int top
    static void setTop(JNIEnv* env, jobject thiz, jint top) {
        assertInited(env);
        env->SetIntField(thiz, getClassInitState().sField_top_4, top);
    }


private:
    ::jenny::LocalRef<jobject> _local;
    ::jenny::GlobalRef<jobject> _global;

public:
    ::jenny::LocalRef<jobject> getThis(bool owned = true) const {
        if (_local) {
            if (owned) {
                return _local;
            } else {
                return ::jenny::LocalRef<jobject>(_local.get(), false);
            }
        } else {
            return _global.toLocal();
        }
    }

    // jni helper constructors
    RectProxy(jobject ref, bool owned = false): _local(ref, owned) {
       assertInited(::jenny::Env().get());
    }

    RectProxy(::jenny::LocalRef<jobject> ref): _local(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    RectProxy(::jenny::GlobalRef<jobject> ref): _global(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    // construct: public Rect()
    static RectProxy newInstance() {
        ::jenny::Env env;
        assertInited(env.get());
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0);
    }
    // construct: public Rect(int left, int top, int right, int bottom)
    static RectProxy newInstance(jint left, jint top, jint right, jint bottom) {
        ::jenny::Env env;
        assertInited(env.get());
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_1, left, top, right, bottom);
    }
    // construct: public Rect(android.graphics.Rect r)
    static RectProxy newInstance(const ::jenny::LocalRef<jobject>& r) {
        ::jenny::Env env;
        assertInited(env.get());
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_2, r.get());
    }

    // method: public boolean equals(java.lang.Object o)
    jboolean equals(const ::jenny::LocalRef<jobject>& o) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_equals_0, o.get());
    }

    // method: public int hashCode()
    jint hashCode() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_hashCode_0);
    }

    // method: public java.lang.String toString()
    ::jenny::LocalRef<jstring> toString() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jstring>(reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_toString_0)));
    }

    // method: public java.lang.String toShortString()
    ::jenny::LocalRef<jstring> toShortString() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jstring>(reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_toShortString_0)));
    }

    // method: public java.lang.String flattenToString()
    ::jenny::LocalRef<jstring> flattenToString() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jstring>(reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_flattenToString_0)));
    }

    // method: public static android.graphics.Rect unflattenFromString(java.lang.String str)
    static ::jenny::LocalRef<jobject> unflattenFromString(const ::jenny::LocalRef<jstring>& str) {
        ::jenny::Env env;
        assertInited(env.get());
        return ::jenny::LocalRef<jobject>(env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_unflattenFromString_0, str.get()));
    }

    // method: public boolean isEmpty()
    jboolean isEmpty() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_isEmpty_0);
    }

    // method: public int width()
    jint width() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_width_0);
    }

    // method: public int height()
    jint height() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_height_0);
    }

    // method: public int centerX()
    jint centerX() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_centerX_0);
    }

    // method: public int centerY()
    jint centerY() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_centerY_0);
    }

    // method: public float exactCenterX()
    jfloat exactCenterX() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallFloatMethod(thiz, getClassInitState().sMethod_exactCenterX_0);
    }

    // method: public float exactCenterY()
    jfloat exactCenterY() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallFloatMethod(thiz, getClassInitState().sMethod_exactCenterY_0);
    }

    // method: public void setEmpty()
    void setEmpty() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_setEmpty_0);
    }

    // method: public void set(int left, int top, int right, int bottom)
    void set(jint left, jint top, jint right, jint bottom) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_set_0, left, top, right, bottom);
    }

    // method: public void set(android.graphics.Rect src)
    void set(const ::jenny::LocalRef<jobject>& src) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_set_1, src.get());
    }

    // method: public void offset(int dx, int dy)
    void offset(jint dx, jint dy) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_offset_0, dx, dy);
    }

    // method: public void offsetTo(int newLeft, int newTop)
    void offsetTo(jint newLeft, jint newTop) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_offsetTo_0, newLeft, newTop);
    }

    // method: public void inset(int dx, int dy)
    void inset(jint dx, jint dy) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_inset_0, dx, dy);
    }

    // method: public void inset(android.graphics.Insets insets)
    void inset(const ::jenny::LocalRef<jobject>& insets) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_inset_1, insets.get());
    }

    // method: public void inset(int left, int top, int right, int bottom)
    void inset(jint left, jint top, jint right, jint bottom) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_inset_2, left, top, right, bottom);
    }

    // method: public boolean contains(int x, int y)
    jboolean contains(jint x, jint y) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_contains_0, x, y);
    }

    // method: public boolean contains(int left, int top, int right, int bottom)
    jboolean contains(jint left, jint top, jint right, jint bottom) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_contains_1, left, top, right, bottom);
    }

    // method: public boolean contains(android.graphics.Rect r)
    jboolean contains(const ::jenny::LocalRef<jobject>& r) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_contains_2, r.get());
    }

    // method: public boolean intersect(int left, int top, int right, int bottom)
    jboolean intersect(jint left, jint top, jint right, jint bottom) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_intersect_0, left, top, right, bottom);
    }

    // method: public boolean intersect(android.graphics.Rect r)
    jboolean intersect(const ::jenny::LocalRef<jobject>& r) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_intersect_1, r.get());
    }

    // method: public boolean setIntersect(android.graphics.Rect a, android.graphics.Rect b)
    jboolean setIntersect(const ::jenny::LocalRef<jobject>& a, const ::jenny::LocalRef<jobject>& b) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_setIntersect_0, a.get(), b.get());
    }

    // method: public boolean intersects(int left, int top, int right, int bottom)
    jboolean intersects(jint left, jint top, jint right, jint bottom) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_intersects_0, left, top, right, bottom);
    }

    // method: public static boolean intersects(android.graphics.Rect a, android.graphics.Rect b)
    static jboolean intersects(const ::jenny::LocalRef<jobject>& a, const ::jenny::LocalRef<jobject>& b) {
        ::jenny::Env env;
        assertInited(env.get());
        return env->CallStaticBooleanMethod(getClassInitState().sClazz, getClassInitState().sMethod_intersects_1, a.get(), b.get());
    }

    // method: public void union(int left, int top, int right, int bottom)
    void union__IIII(jint left, jint top, jint right, jint bottom) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_union_0, left, top, right, bottom);
    }

    // method: public void union(android.graphics.Rect r)
    void union__Landroid_graphics_Rect_2(const ::jenny::LocalRef<jobject>& r) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_union_1, r.get());
    }

    // method: public void union(int x, int y)
    void union__II(jint x, jint y) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_union_2, x, y);
    }

    // method: public void sort()
    void sort() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_sort_0);
    }

    // method: public int describeContents()
    jint describeContents() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_describeContents_0);
    }

    // method: public void writeToParcel(android.os.Parcel out, int flags)
    void writeToParcel(const ::jenny::LocalRef<jobject>& out, jint flags) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_writeToParcel_0, out.get(), flags);
    }

    // method: public void readFromParcel(android.os.Parcel in)
    void readFromParcel(const ::jenny::LocalRef<jobject>& in) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_readFromParcel_0, in.get());
    }


    // field: public static final android.os.Parcelable.Creator<android.graphics.Rect> CREATOR
    static ::jenny::LocalRef<jobject> getCREATOR() {
        ::jenny::Env env;
        assertInited(env.get());
        return ::jenny::LocalRef<jobject>(env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_CREATOR_0));
    }

    // field: public static final android.os.Parcelable.Creator<android.graphics.Rect> CREATOR
    static void setCREATOR(const ::jenny::LocalRef<jobject>& CREATOR) {
        ::jenny::Env env;
        assertInited(env.get());
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_CREATOR_0, CREATOR.get());
    }

    // field: public int bottom
    jint getBottom() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->GetIntField(thiz, getClassInitState().sField_bottom_1);
    }

    // field: public int bottom
    void setBottom(jint bottom) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->SetIntField(thiz, getClassInitState().sField_bottom_1, bottom);
    }

    // field: public int left
    jint getLeft() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->GetIntField(thiz, getClassInitState().sField_left_2);
    }

    // field: public int left
    void setLeft(jint left) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->SetIntField(thiz, getClassInitState().sField_left_2, left);
    }

    // field: public int right
    jint getRight() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->GetIntField(thiz, getClassInitState().sField_right_3);
    }

    // field: public int right
    void setRight(jint right) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->SetIntField(thiz, getClassInitState().sField_right_3, right);
    }

    // field: public int top
    jint getTop() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->GetIntField(thiz, getClassInitState().sField_top_4);
    }

    // field: public int top
    void setTop(jint top) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->SetIntField(thiz, getClassInitState().sField_top_4, top);
    }


private:
    struct ClassInitState {
        // thread safe init
        std::atomic_bool sInited {};
        std::mutex sInitLock {};
        jclass sClazz = nullptr;

        jmethodID sConstruct_0 = nullptr;
        jmethodID sConstruct_1 = nullptr;
        jmethodID sConstruct_2 = nullptr;

        jmethodID sMethod_equals_0 = nullptr;
        jmethodID sMethod_hashCode_0 = nullptr;
        jmethodID sMethod_toString_0 = nullptr;
        jmethodID sMethod_toShortString_0 = nullptr;
        jmethodID sMethod_flattenToString_0 = nullptr;
        jmethodID sMethod_unflattenFromString_0 = nullptr;
        jmethodID sMethod_isEmpty_0 = nullptr;
        jmethodID sMethod_width_0 = nullptr;
        jmethodID sMethod_height_0 = nullptr;
        jmethodID sMethod_centerX_0 = nullptr;
        jmethodID sMethod_centerY_0 = nullptr;
        jmethodID sMethod_exactCenterX_0 = nullptr;
        jmethodID sMethod_exactCenterY_0 = nullptr;
        jmethodID sMethod_setEmpty_0 = nullptr;
        jmethodID sMethod_set_0 = nullptr;
        jmethodID sMethod_set_1 = nullptr;
        jmethodID sMethod_offset_0 = nullptr;
        jmethodID sMethod_offsetTo_0 = nullptr;
        jmethodID sMethod_inset_0 = nullptr;
        jmethodID sMethod_inset_1 = nullptr;
        jmethodID sMethod_inset_2 = nullptr;
        jmethodID sMethod_contains_0 = nullptr;
        jmethodID sMethod_contains_1 = nullptr;
        jmethodID sMethod_contains_2 = nullptr;
        jmethodID sMethod_intersect_0 = nullptr;
        jmethodID sMethod_intersect_1 = nullptr;
        jmethodID sMethod_setIntersect_0 = nullptr;
        jmethodID sMethod_intersects_0 = nullptr;
        jmethodID sMethod_intersects_1 = nullptr;
        jmethodID sMethod_union_0 = nullptr;
        jmethodID sMethod_union_1 = nullptr;
        jmethodID sMethod_union_2 = nullptr;
        jmethodID sMethod_sort_0 = nullptr;
        jmethodID sMethod_describeContents_0 = nullptr;
        jmethodID sMethod_writeToParcel_0 = nullptr;
        jmethodID sMethod_readFromParcel_0 = nullptr;

        jfieldID sField_CREATOR_0 = nullptr;
        jfieldID sField_bottom_1 = nullptr;
        jfieldID sField_left_2 = nullptr;
        jfieldID sField_right_3 = nullptr;
        jfieldID sField_top_4 = nullptr;
    }; // endof struct ClassInitState

    static inline ClassInitState& getClassInitState() {
        static ClassInitState classInitState;
        return classInitState;
    }

};


/*static*/ inline bool RectProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init RectProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (!state.sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(state.sClazz);

            state.sConstruct_0 = env->GetMethodID(state.sClazz, "<init>", "()V");
            JENNY_CHECK_NULL(state.sConstruct_0);
            state.sConstruct_1 = env->GetMethodID(state.sClazz, "<init>", "(IIII)V");
            JENNY_CHECK_NULL(state.sConstruct_1);
            state.sConstruct_2 = env->GetMethodID(state.sClazz, "<init>", "(Landroid/graphics/Rect;)V");
            JENNY_CHECK_NULL(state.sConstruct_2);

            state.sMethod_equals_0 = env->GetMethodID(state.sClazz, "equals", "(Ljava/lang/Object;)Z");
            JENNY_CHECK_NULL(state.sMethod_equals_0);
            state.sMethod_hashCode_0 = env->GetMethodID(state.sClazz, "hashCode", "()I");
            JENNY_CHECK_NULL(state.sMethod_hashCode_0);
            state.sMethod_toString_0 = env->GetMethodID(state.sClazz, "toString", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_toString_0);
            state.sMethod_toShortString_0 = env->GetMethodID(state.sClazz, "toShortString", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_toShortString_0);
            state.sMethod_flattenToString_0 = env->GetMethodID(state.sClazz, "flattenToString", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_flattenToString_0);
            state.sMethod_unflattenFromString_0 = env->GetStaticMethodID(state.sClazz, "unflattenFromString", "(Ljava/lang/String;)Landroid/graphics/Rect;");
            JENNY_CHECK_NULL(state.sMethod_unflattenFromString_0);
            state.sMethod_isEmpty_0 = env->GetMethodID(state.sClazz, "isEmpty", "()Z");
            JENNY_CHECK_NULL(state.sMethod_isEmpty_0);
            state.sMethod_width_0 = env->GetMethodID(state.sClazz, "width", "()I");
            JENNY_CHECK_NULL(state.sMethod_width_0);
            state.sMethod_height_0 = env->GetMethodID(state.sClazz, "height", "()I");
            JENNY_CHECK_NULL(state.sMethod_height_0);
            state.sMethod_centerX_0 = env->GetMethodID(state.sClazz, "centerX", "()I");
            JENNY_CHECK_NULL(state.sMethod_centerX_0);
            state.sMethod_centerY_0 = env->GetMethodID(state.sClazz, "centerY", "()I");
            JENNY_CHECK_NULL(state.sMethod_centerY_0);
            state.sMethod_exactCenterX_0 = env->GetMethodID(state.sClazz, "exactCenterX", "()F");
            JENNY_CHECK_NULL(state.sMethod_exactCenterX_0);
            state.sMethod_exactCenterY_0 = env->GetMethodID(state.sClazz, "exactCenterY", "()F");
            JENNY_CHECK_NULL(state.sMethod_exactCenterY_0);
            state.sMethod_setEmpty_0 = env->GetMethodID(state.sClazz, "setEmpty", "()V");
            JENNY_CHECK_NULL(state.sMethod_setEmpty_0);
            state.sMethod_set_0 = env->GetMethodID(state.sClazz, "set", "(IIII)V");
            JENNY_CHECK_NULL(state.sMethod_set_0);
            state.sMethod_set_1 = env->GetMethodID(state.sClazz, "set", "(Landroid/graphics/Rect;)V");
            JENNY_CHECK_NULL(state.sMethod_set_1);
            state.sMethod_offset_0 = env->GetMethodID(state.sClazz, "offset", "(II)V");
            JENNY_CHECK_NULL(state.sMethod_offset_0);
            state.sMethod_offsetTo_0 = env->GetMethodID(state.sClazz, "offsetTo", "(II)V");
            JENNY_CHECK_NULL(state.sMethod_offsetTo_0);
            state.sMethod_inset_0 = env->GetMethodID(state.sClazz, "inset", "(II)V");
            JENNY_CHECK_NULL(state.sMethod_inset_0);
            state.sMethod_inset_1 = env->GetMethodID(state.sClazz, "inset", "(Landroid/graphics/Insets;)V");
            JENNY_CHECK_NULL(state.sMethod_inset_1);
            state.sMethod_inset_2 = env->GetMethodID(state.sClazz, "inset", "(IIII)V");
            JENNY_CHECK_NULL(state.sMethod_inset_2);
            state.sMethod_contains_0 = env->GetMethodID(state.sClazz, "contains", "(II)Z");
            JENNY_CHECK_NULL(state.sMethod_contains_0);
            state.sMethod_contains_1 = env->GetMethodID(state.sClazz, "contains", "(IIII)Z");
            JENNY_CHECK_NULL(state.sMethod_contains_1);
            state.sMethod_contains_2 = env->GetMethodID(state.sClazz, "contains", "(Landroid/graphics/Rect;)Z");
            JENNY_CHECK_NULL(state.sMethod_contains_2);
            state.sMethod_intersect_0 = env->GetMethodID(state.sClazz, "intersect", "(IIII)Z");
            JENNY_CHECK_NULL(state.sMethod_intersect_0);
            state.sMethod_intersect_1 = env->GetMethodID(state.sClazz, "intersect", "(Landroid/graphics/Rect;)Z");
            JENNY_CHECK_NULL(state.sMethod_intersect_1);
            state.sMethod_setIntersect_0 = env->GetMethodID(state.sClazz, "setIntersect", "(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z");
            JENNY_CHECK_NULL(state.sMethod_setIntersect_0);
            state.sMethod_intersects_0 = env->GetMethodID(state.sClazz, "intersects", "(IIII)Z");
            JENNY_CHECK_NULL(state.sMethod_intersects_0);
            state.sMethod_intersects_1 = env->GetStaticMethodID(state.sClazz, "intersects", "(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z");
            JENNY_CHECK_NULL(state.sMethod_intersects_1);
            state.sMethod_union_0 = env->GetMethodID(state.sClazz, "union", "(IIII)V");
            JENNY_CHECK_NULL(state.sMethod_union_0);
            state.sMethod_union_1 = env->GetMethodID(state.sClazz, "union", "(Landroid/graphics/Rect;)V");
            JENNY_CHECK_NULL(state.sMethod_union_1);
            state.sMethod_union_2 = env->GetMethodID(state.sClazz, "union", "(II)V");
            JENNY_CHECK_NULL(state.sMethod_union_2);
            state.sMethod_sort_0 = env->GetMethodID(state.sClazz, "sort", "()V");
            JENNY_CHECK_NULL(state.sMethod_sort_0);
            state.sMethod_describeContents_0 = env->GetMethodID(state.sClazz, "describeContents", "()I");
            JENNY_CHECK_NULL(state.sMethod_describeContents_0);
            state.sMethod_writeToParcel_0 = env->GetMethodID(state.sClazz, "writeToParcel", "(Landroid/os/Parcel;I)V");
            JENNY_CHECK_NULL(state.sMethod_writeToParcel_0);
            state.sMethod_readFromParcel_0 = env->GetMethodID(state.sClazz, "readFromParcel", "(Landroid/os/Parcel;)V");
            JENNY_CHECK_NULL(state.sMethod_readFromParcel_0);

            state.sField_CREATOR_0 = env->GetStaticFieldID(state.sClazz, "CREATOR", "Landroid/os/Parcelable$Creator;");
            JENNY_CHECK_NULL(state.sField_CREATOR_0);
            state.sField_bottom_1 = env->GetFieldID(state.sClazz, "bottom", "I");
            JENNY_CHECK_NULL(state.sField_bottom_1);
            state.sField_left_2 = env->GetFieldID(state.sClazz, "left", "I");
            JENNY_CHECK_NULL(state.sField_left_2);
            state.sField_right_3 = env->GetFieldID(state.sClazz, "right", "I");
            JENNY_CHECK_NULL(state.sField_right_3);
            state.sField_top_4 = env->GetFieldID(state.sClazz, "top", "I");
            JENNY_CHECK_NULL(state.sField_top_4);

            state.sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ inline void RectProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (state.sInited) {
            env->DeleteGlobalRef(state.sClazz);
            state.sClazz = nullptr;
            state.sInited = false;
        }
    }
}


} // end of namespace android
