/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#include <jni.h>
#include <assert.h>
#include <atomic>
#include <mutex>

#include "jnigen/jni_helper.h"

// external logger function
void jennySampleErrorLog(JNIEnv* env, const char* error);


namespace java {
namespace okhttp {
class BuilderProxy {

public:
    static constexpr auto FULL_CLASS_NAME = u8"okhttp3/Request$Builder";


public:
    static bool initClazz(JNIEnv* env);

    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    // construct: public Builder()
    static jobject newInstance(JNIEnv* env) {
        assertInited(env);
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0);
    }

    // method: public okhttp3.Request.Builder url(okhttp3.HttpUrl url)
    static jobject url__Lokhttp3_HttpUrl_2(JNIEnv* env, jobject thiz, jobject url) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_url_0, url);
    }

    // method: public okhttp3.Request.Builder url(java.lang.String url)
    static jobject url(JNIEnv* env, jobject thiz, jstring url) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_url_1, url);
    }

    // method: public okhttp3.Request.Builder url(java.net.URL url)
    static jobject url__Ljava_net_URL_2(JNIEnv* env, jobject thiz, jobject url) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_url_2, url);
    }

    // method: public okhttp3.Request.Builder header(java.lang.String name, java.lang.String value)
    static jobject header(JNIEnv* env, jobject thiz, jstring name, jstring value) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_header_0, name, value);
    }

    // method: public okhttp3.Request.Builder addHeader(java.lang.String name, java.lang.String value)
    static jobject addHeader(JNIEnv* env, jobject thiz, jstring name, jstring value) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_addHeader_0, name, value);
    }

    // method: public okhttp3.Request.Builder removeHeader(java.lang.String name)
    static jobject removeHeader(JNIEnv* env, jobject thiz, jstring name) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_removeHeader_0, name);
    }

    // method: public okhttp3.Request.Builder headers(okhttp3.Headers headers)
    static jobject headers(JNIEnv* env, jobject thiz, jobject headers) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_headers_0, headers);
    }

    // method: public okhttp3.Request.Builder cacheControl(okhttp3.CacheControl cacheControl)
    static jobject cacheControl(JNIEnv* env, jobject thiz, jobject cacheControl) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_cacheControl_0, cacheControl);
    }

    // method: public okhttp3.Request.Builder get()
    static jobject get(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_get_0);
    }

    // method: public okhttp3.Request.Builder head()
    static jobject head(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_head_0);
    }

    // method: public okhttp3.Request.Builder post(okhttp3.RequestBody body)
    static jobject post(JNIEnv* env, jobject thiz, jobject body) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_post_0, body);
    }

    // method: public okhttp3.Request.Builder delete(okhttp3.RequestBody body)
    static jobject delete__Lokhttp3_RequestBody_2(JNIEnv* env, jobject thiz, jobject body) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_delete_0, body);
    }

    // method: public okhttp3.Request.Builder delete()
    static jobject delete__(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_delete_1);
    }

    // method: public okhttp3.Request.Builder put(okhttp3.RequestBody body)
    static jobject put(JNIEnv* env, jobject thiz, jobject body) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_put_0, body);
    }

    // method: public okhttp3.Request.Builder patch(okhttp3.RequestBody body)
    static jobject patch(JNIEnv* env, jobject thiz, jobject body) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_patch_0, body);
    }

    // method: public okhttp3.Request.Builder method(java.lang.String method, okhttp3.RequestBody body)
    static jobject method(JNIEnv* env, jobject thiz, jstring method, jobject body) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_method_0, method, body);
    }

    // method: public okhttp3.Request.Builder tag(java.lang.Object tag)
    static jobject tag(JNIEnv* env, jobject thiz, jobject tag) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_tag_0, tag);
    }

    // method: public okhttp3.Request.Builder tag(java.lang.Class<? super T> type, T tag)
    static jobject tag(JNIEnv* env, jobject thiz, jclass type, jobject tag) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_tag_1, type, tag);
    }

    // method: public okhttp3.Request build()
    static jobject build(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_build_0);
    }



private:
    ::jenny::LocalRef<jobject> _local;
    ::jenny::GlobalRef<jobject> _global;

public:
    ::jenny::LocalRef<jobject> getThis(bool owned = true) const {
        if (_local) {
            if (owned) {
                return _local;
            } else {
                return ::jenny::LocalRef<jobject>(_local.get(), false);
            }
        } else {
            return _global.toLocal();
        }
    }

    // jni helper constructors
    BuilderProxy(jobject ref, bool owned = false): _local(ref, owned) {
       assertInited(::jenny::Env().get());
    }

    BuilderProxy(::jenny::LocalRef<jobject> ref): _local(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    BuilderProxy(::jenny::GlobalRef<jobject> ref): _global(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    // construct: public Builder()
    static BuilderProxy newInstance() {
        ::jenny::Env env;
        assertInited(env.get());
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0);
    }

    // method: public okhttp3.Request.Builder url(okhttp3.HttpUrl url)
    ::jenny::LocalRef<jobject> url__Lokhttp3_HttpUrl_2(const ::jenny::LocalRef<jobject>& url) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_url_0, url.get()));
    }

    // method: public okhttp3.Request.Builder url(java.lang.String url)
    ::jenny::LocalRef<jobject> url(const ::jenny::LocalRef<jstring>& url) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_url_1, url.get()));
    }

    // method: public okhttp3.Request.Builder url(java.net.URL url)
    ::jenny::LocalRef<jobject> url__Ljava_net_URL_2(const ::jenny::LocalRef<jobject>& url) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_url_2, url.get()));
    }

    // method: public okhttp3.Request.Builder header(java.lang.String name, java.lang.String value)
    ::jenny::LocalRef<jobject> header(const ::jenny::LocalRef<jstring>& name, const ::jenny::LocalRef<jstring>& value) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_header_0, name.get(), value.get()));
    }

    // method: public okhttp3.Request.Builder addHeader(java.lang.String name, java.lang.String value)
    ::jenny::LocalRef<jobject> addHeader(const ::jenny::LocalRef<jstring>& name, const ::jenny::LocalRef<jstring>& value) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_addHeader_0, name.get(), value.get()));
    }

    // method: public okhttp3.Request.Builder removeHeader(java.lang.String name)
    ::jenny::LocalRef<jobject> removeHeader(const ::jenny::LocalRef<jstring>& name) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_removeHeader_0, name.get()));
    }

    // method: public okhttp3.Request.Builder headers(okhttp3.Headers headers)
    ::jenny::LocalRef<jobject> headers(const ::jenny::LocalRef<jobject>& headers) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_headers_0, headers.get()));
    }

    // method: public okhttp3.Request.Builder cacheControl(okhttp3.CacheControl cacheControl)
    ::jenny::LocalRef<jobject> cacheControl(const ::jenny::LocalRef<jobject>& cacheControl) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_cacheControl_0, cacheControl.get()));
    }

    // method: public okhttp3.Request.Builder get()
    ::jenny::LocalRef<jobject> get() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_get_0));
    }

    // method: public okhttp3.Request.Builder head()
    ::jenny::LocalRef<jobject> head() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_head_0));
    }

    // method: public okhttp3.Request.Builder post(okhttp3.RequestBody body)
    ::jenny::LocalRef<jobject> post(const ::jenny::LocalRef<jobject>& body) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_post_0, body.get()));
    }

    // method: public okhttp3.Request.Builder delete(okhttp3.RequestBody body)
    ::jenny::LocalRef<jobject> delete__Lokhttp3_RequestBody_2(const ::jenny::LocalRef<jobject>& body) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_delete_0, body.get()));
    }

    // method: public okhttp3.Request.Builder delete()
    ::jenny::LocalRef<jobject> delete__() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_delete_1));
    }

    // method: public okhttp3.Request.Builder put(okhttp3.RequestBody body)
    ::jenny::LocalRef<jobject> put(const ::jenny::LocalRef<jobject>& body) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_put_0, body.get()));
    }

    // method: public okhttp3.Request.Builder patch(okhttp3.RequestBody body)
    ::jenny::LocalRef<jobject> patch(const ::jenny::LocalRef<jobject>& body) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_patch_0, body.get()));
    }

    // method: public okhttp3.Request.Builder method(java.lang.String method, okhttp3.RequestBody body)
    ::jenny::LocalRef<jobject> method(const ::jenny::LocalRef<jstring>& method, const ::jenny::LocalRef<jobject>& body) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_method_0, method.get(), body.get()));
    }

    // method: public okhttp3.Request.Builder tag(java.lang.Object tag)
    ::jenny::LocalRef<jobject> tag(const ::jenny::LocalRef<jobject>& tag) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_tag_0, tag.get()));
    }

    // method: public okhttp3.Request.Builder tag(java.lang.Class<? super T> type, T tag)
    ::jenny::LocalRef<jobject> tag(const ::jenny::LocalRef<jclass>& type, const ::jenny::LocalRef<jobject>& tag) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_tag_1, type.get(), tag.get()));
    }

    // method: public okhttp3.Request build()
    ::jenny::LocalRef<jobject> build() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_build_0));
    }



private:
    struct ClassInitState {
        // thread safe init
        std::atomic_bool sInited {};
        std::mutex sInitLock {};
        jclass sClazz = nullptr;

        jmethodID sConstruct_0 = nullptr;

        jmethodID sMethod_url_0 = nullptr;
        jmethodID sMethod_url_1 = nullptr;
        jmethodID sMethod_url_2 = nullptr;
        jmethodID sMethod_header_0 = nullptr;
        jmethodID sMethod_addHeader_0 = nullptr;
        jmethodID sMethod_removeHeader_0 = nullptr;
        jmethodID sMethod_headers_0 = nullptr;
        jmethodID sMethod_cacheControl_0 = nullptr;
        jmethodID sMethod_get_0 = nullptr;
        jmethodID sMethod_head_0 = nullptr;
        jmethodID sMethod_post_0 = nullptr;
        jmethodID sMethod_delete_0 = nullptr;
        jmethodID sMethod_delete_1 = nullptr;
        jmethodID sMethod_put_0 = nullptr;
        jmethodID sMethod_patch_0 = nullptr;
        jmethodID sMethod_method_0 = nullptr;
        jmethodID sMethod_tag_0 = nullptr;
        jmethodID sMethod_tag_1 = nullptr;
        jmethodID sMethod_build_0 = nullptr;

    }; // endof struct ClassInitState

    static inline ClassInitState& getClassInitState() {
        static ClassInitState classInitState;
        return classInitState;
    }

};


/*static*/ inline bool BuilderProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init BuilderProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (!state.sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(state.sClazz);

            state.sConstruct_0 = env->GetMethodID(state.sClazz, "<init>", "()V");
            JENNY_CHECK_NULL(state.sConstruct_0);

            state.sMethod_url_0 = env->GetMethodID(state.sClazz, "url", "(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_url_0);
            state.sMethod_url_1 = env->GetMethodID(state.sClazz, "url", "(Ljava/lang/String;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_url_1);
            state.sMethod_url_2 = env->GetMethodID(state.sClazz, "url", "(Ljava/net/URL;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_url_2);
            state.sMethod_header_0 = env->GetMethodID(state.sClazz, "header", "(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_header_0);
            state.sMethod_addHeader_0 = env->GetMethodID(state.sClazz, "addHeader", "(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_addHeader_0);
            state.sMethod_removeHeader_0 = env->GetMethodID(state.sClazz, "removeHeader", "(Ljava/lang/String;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_removeHeader_0);
            state.sMethod_headers_0 = env->GetMethodID(state.sClazz, "headers", "(Lokhttp3/Headers;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_headers_0);
            state.sMethod_cacheControl_0 = env->GetMethodID(state.sClazz, "cacheControl", "(Lokhttp3/CacheControl;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_cacheControl_0);
            state.sMethod_get_0 = env->GetMethodID(state.sClazz, "get", "()Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_get_0);
            state.sMethod_head_0 = env->GetMethodID(state.sClazz, "head", "()Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_head_0);
            state.sMethod_post_0 = env->GetMethodID(state.sClazz, "post", "(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_post_0);
            state.sMethod_delete_0 = env->GetMethodID(state.sClazz, "delete", "(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_delete_0);
            state.sMethod_delete_1 = env->GetMethodID(state.sClazz, "delete", "()Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_delete_1);
            state.sMethod_put_0 = env->GetMethodID(state.sClazz, "put", "(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_put_0);
            state.sMethod_patch_0 = env->GetMethodID(state.sClazz, "patch", "(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_patch_0);
            state.sMethod_method_0 = env->GetMethodID(state.sClazz, "method", "(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_method_0);
            state.sMethod_tag_0 = env->GetMethodID(state.sClazz, "tag", "(Ljava/lang/Object;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_tag_0);
            state.sMethod_tag_1 = env->GetMethodID(state.sClazz, "tag", "(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/Request$Builder;");
            JENNY_CHECK_NULL(state.sMethod_tag_1);
            state.sMethod_build_0 = env->GetMethodID(state.sClazz, "build", "()Lokhttp3/Request;");
            JENNY_CHECK_NULL(state.sMethod_build_0);


            state.sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ inline void BuilderProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (state.sInited) {
            env->DeleteGlobalRef(state.sClazz);
            state.sClazz = nullptr;
            state.sInited = false;
        }
    }
}


} // end of namespace java
} // end of namespace okhttp
