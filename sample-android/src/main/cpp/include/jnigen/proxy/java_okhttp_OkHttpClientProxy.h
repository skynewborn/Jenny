/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#include <jni.h>
#include <assert.h>
#include <atomic>
#include <mutex>

#include "jnigen/jni_helper.h"

// external logger function
void jennySampleErrorLog(JNIEnv* env, const char* error);


namespace java {
namespace okhttp {
class OkHttpClientProxy {

public:
    static constexpr auto FULL_CLASS_NAME = u8"okhttp3/OkHttpClient";


public:
    static bool initClazz(JNIEnv* env);

    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    // construct: public OkHttpClient()
    static jobject newInstance(JNIEnv* env) {
        assertInited(env);
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0);
    }

    // method: public int callTimeoutMillis()
    static jint callTimeoutMillis(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_callTimeoutMillis_0);
    }

    // method: public int connectTimeoutMillis()
    static jint connectTimeoutMillis(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_connectTimeoutMillis_0);
    }

    // method: public int readTimeoutMillis()
    static jint readTimeoutMillis(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_readTimeoutMillis_0);
    }

    // method: public int writeTimeoutMillis()
    static jint writeTimeoutMillis(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_writeTimeoutMillis_0);
    }

    // method: public int pingIntervalMillis()
    static jint pingIntervalMillis(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_pingIntervalMillis_0);
    }

    // method: public java.net.Proxy proxy()
    static jobject proxy(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_proxy_0);
    }

    // method: public java.net.ProxySelector proxySelector()
    static jobject proxySelector(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_proxySelector_0);
    }

    // method: public okhttp3.CookieJar cookieJar()
    static jobject cookieJar(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_cookieJar_0);
    }

    // method: public okhttp3.Cache cache()
    static jobject cache(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_cache_0);
    }

    // method: public okhttp3.Dns dns()
    static jobject dns(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_dns_0);
    }

    // method: public javax.net.SocketFactory socketFactory()
    static jobject socketFactory(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_socketFactory_0);
    }

    // method: public javax.net.ssl.SSLSocketFactory sslSocketFactory()
    static jobject sslSocketFactory(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_sslSocketFactory_0);
    }

    // method: public javax.net.ssl.HostnameVerifier hostnameVerifier()
    static jobject hostnameVerifier(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_hostnameVerifier_0);
    }

    // method: public okhttp3.CertificatePinner certificatePinner()
    static jobject certificatePinner(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_certificatePinner_0);
    }

    // method: public okhttp3.Authenticator authenticator()
    static jobject authenticator(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_authenticator_0);
    }

    // method: public okhttp3.Authenticator proxyAuthenticator()
    static jobject proxyAuthenticator(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_proxyAuthenticator_0);
    }

    // method: public okhttp3.ConnectionPool connectionPool()
    static jobject connectionPool(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_connectionPool_0);
    }

    // method: public boolean followSslRedirects()
    static jboolean followSslRedirects(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_followSslRedirects_0);
    }

    // method: public boolean followRedirects()
    static jboolean followRedirects(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_followRedirects_0);
    }

    // method: public boolean retryOnConnectionFailure()
    static jboolean retryOnConnectionFailure(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_retryOnConnectionFailure_0);
    }

    // method: public okhttp3.Dispatcher dispatcher()
    static jobject dispatcher(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_dispatcher_0);
    }

    // method: public java.util.List<okhttp3.Protocol> protocols()
    static jobject protocols(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_protocols_0);
    }

    // method: public java.util.List<okhttp3.ConnectionSpec> connectionSpecs()
    static jobject connectionSpecs(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_connectionSpecs_0);
    }

    // method: public java.util.List<okhttp3.Interceptor> interceptors()
    static jobject interceptors(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_interceptors_0);
    }

    // method: public java.util.List<okhttp3.Interceptor> networkInterceptors()
    static jobject networkInterceptors(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_networkInterceptors_0);
    }

    // method: public okhttp3.EventListener.Factory eventListenerFactory()
    static jobject eventListenerFactory(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_eventListenerFactory_0);
    }

    // method: public okhttp3.Call newCall(okhttp3.Request request)
    static jobject newCall(JNIEnv* env, jobject thiz, jobject request) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_newCall_0, request);
    }

    // method: public okhttp3.WebSocket newWebSocket(okhttp3.Request request, okhttp3.WebSocketListener listener)
    static jobject newWebSocket(JNIEnv* env, jobject thiz, jobject request, jobject listener) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_newWebSocket_0, request, listener);
    }

    // method: public okhttp3.OkHttpClient.Builder newBuilder()
    static jobject newBuilder(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_newBuilder_0);
    }



private:
    ::jenny::LocalRef<jobject> _local;
    ::jenny::GlobalRef<jobject> _global;

public:
    ::jenny::LocalRef<jobject> getThis(bool owned = true) const {
        if (_local) {
            if (owned) {
                return _local;
            } else {
                return ::jenny::LocalRef<jobject>(_local.get(), false);
            }
        } else {
            return _global.toLocal();
        }
    }

    // jni helper constructors
    OkHttpClientProxy(jobject ref, bool owned = false): _local(ref, owned) {
       assertInited(::jenny::Env().get());
    }

    OkHttpClientProxy(::jenny::LocalRef<jobject> ref): _local(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    OkHttpClientProxy(::jenny::GlobalRef<jobject> ref): _global(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    // construct: public OkHttpClient()
    static OkHttpClientProxy newInstance() {
        ::jenny::Env env;
        assertInited(env.get());
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0);
    }

    // method: public int callTimeoutMillis()
    jint callTimeoutMillis() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_callTimeoutMillis_0);
    }

    // method: public int connectTimeoutMillis()
    jint connectTimeoutMillis() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_connectTimeoutMillis_0);
    }

    // method: public int readTimeoutMillis()
    jint readTimeoutMillis() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_readTimeoutMillis_0);
    }

    // method: public int writeTimeoutMillis()
    jint writeTimeoutMillis() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_writeTimeoutMillis_0);
    }

    // method: public int pingIntervalMillis()
    jint pingIntervalMillis() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_pingIntervalMillis_0);
    }

    // method: public java.net.Proxy proxy()
    ::jenny::LocalRef<jobject> proxy() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_proxy_0));
    }

    // method: public java.net.ProxySelector proxySelector()
    ::jenny::LocalRef<jobject> proxySelector() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_proxySelector_0));
    }

    // method: public okhttp3.CookieJar cookieJar()
    ::jenny::LocalRef<jobject> cookieJar() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_cookieJar_0));
    }

    // method: public okhttp3.Cache cache()
    ::jenny::LocalRef<jobject> cache() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_cache_0));
    }

    // method: public okhttp3.Dns dns()
    ::jenny::LocalRef<jobject> dns() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_dns_0));
    }

    // method: public javax.net.SocketFactory socketFactory()
    ::jenny::LocalRef<jobject> socketFactory() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_socketFactory_0));
    }

    // method: public javax.net.ssl.SSLSocketFactory sslSocketFactory()
    ::jenny::LocalRef<jobject> sslSocketFactory() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_sslSocketFactory_0));
    }

    // method: public javax.net.ssl.HostnameVerifier hostnameVerifier()
    ::jenny::LocalRef<jobject> hostnameVerifier() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_hostnameVerifier_0));
    }

    // method: public okhttp3.CertificatePinner certificatePinner()
    ::jenny::LocalRef<jobject> certificatePinner() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_certificatePinner_0));
    }

    // method: public okhttp3.Authenticator authenticator()
    ::jenny::LocalRef<jobject> authenticator() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_authenticator_0));
    }

    // method: public okhttp3.Authenticator proxyAuthenticator()
    ::jenny::LocalRef<jobject> proxyAuthenticator() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_proxyAuthenticator_0));
    }

    // method: public okhttp3.ConnectionPool connectionPool()
    ::jenny::LocalRef<jobject> connectionPool() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_connectionPool_0));
    }

    // method: public boolean followSslRedirects()
    jboolean followSslRedirects() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_followSslRedirects_0);
    }

    // method: public boolean followRedirects()
    jboolean followRedirects() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_followRedirects_0);
    }

    // method: public boolean retryOnConnectionFailure()
    jboolean retryOnConnectionFailure() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_retryOnConnectionFailure_0);
    }

    // method: public okhttp3.Dispatcher dispatcher()
    ::jenny::LocalRef<jobject> dispatcher() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_dispatcher_0));
    }

    // method: public java.util.List<okhttp3.Protocol> protocols()
    ::jenny::LocalRef<jobject> protocols() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_protocols_0));
    }

    // method: public java.util.List<okhttp3.ConnectionSpec> connectionSpecs()
    ::jenny::LocalRef<jobject> connectionSpecs() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_connectionSpecs_0));
    }

    // method: public java.util.List<okhttp3.Interceptor> interceptors()
    ::jenny::LocalRef<jobject> interceptors() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_interceptors_0));
    }

    // method: public java.util.List<okhttp3.Interceptor> networkInterceptors()
    ::jenny::LocalRef<jobject> networkInterceptors() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_networkInterceptors_0));
    }

    // method: public okhttp3.EventListener.Factory eventListenerFactory()
    ::jenny::LocalRef<jobject> eventListenerFactory() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_eventListenerFactory_0));
    }

    // method: public okhttp3.Call newCall(okhttp3.Request request)
    ::jenny::LocalRef<jobject> newCall(const ::jenny::LocalRef<jobject>& request) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_newCall_0, request.get()));
    }

    // method: public okhttp3.WebSocket newWebSocket(okhttp3.Request request, okhttp3.WebSocketListener listener)
    ::jenny::LocalRef<jobject> newWebSocket(const ::jenny::LocalRef<jobject>& request, const ::jenny::LocalRef<jobject>& listener) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_newWebSocket_0, request.get(), listener.get()));
    }

    // method: public okhttp3.OkHttpClient.Builder newBuilder()
    ::jenny::LocalRef<jobject> newBuilder() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_newBuilder_0));
    }



private:
    struct ClassInitState {
        // thread safe init
        std::atomic_bool sInited {};
        std::mutex sInitLock {};
        jclass sClazz = nullptr;

        jmethodID sConstruct_0 = nullptr;

        jmethodID sMethod_callTimeoutMillis_0 = nullptr;
        jmethodID sMethod_connectTimeoutMillis_0 = nullptr;
        jmethodID sMethod_readTimeoutMillis_0 = nullptr;
        jmethodID sMethod_writeTimeoutMillis_0 = nullptr;
        jmethodID sMethod_pingIntervalMillis_0 = nullptr;
        jmethodID sMethod_proxy_0 = nullptr;
        jmethodID sMethod_proxySelector_0 = nullptr;
        jmethodID sMethod_cookieJar_0 = nullptr;
        jmethodID sMethod_cache_0 = nullptr;
        jmethodID sMethod_dns_0 = nullptr;
        jmethodID sMethod_socketFactory_0 = nullptr;
        jmethodID sMethod_sslSocketFactory_0 = nullptr;
        jmethodID sMethod_hostnameVerifier_0 = nullptr;
        jmethodID sMethod_certificatePinner_0 = nullptr;
        jmethodID sMethod_authenticator_0 = nullptr;
        jmethodID sMethod_proxyAuthenticator_0 = nullptr;
        jmethodID sMethod_connectionPool_0 = nullptr;
        jmethodID sMethod_followSslRedirects_0 = nullptr;
        jmethodID sMethod_followRedirects_0 = nullptr;
        jmethodID sMethod_retryOnConnectionFailure_0 = nullptr;
        jmethodID sMethod_dispatcher_0 = nullptr;
        jmethodID sMethod_protocols_0 = nullptr;
        jmethodID sMethod_connectionSpecs_0 = nullptr;
        jmethodID sMethod_interceptors_0 = nullptr;
        jmethodID sMethod_networkInterceptors_0 = nullptr;
        jmethodID sMethod_eventListenerFactory_0 = nullptr;
        jmethodID sMethod_newCall_0 = nullptr;
        jmethodID sMethod_newWebSocket_0 = nullptr;
        jmethodID sMethod_newBuilder_0 = nullptr;

    }; // endof struct ClassInitState

    static inline ClassInitState& getClassInitState() {
        static ClassInitState classInitState;
        return classInitState;
    }

};


/*static*/ inline bool OkHttpClientProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init OkHttpClientProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (!state.sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(state.sClazz);

            state.sConstruct_0 = env->GetMethodID(state.sClazz, "<init>", "()V");
            JENNY_CHECK_NULL(state.sConstruct_0);

            state.sMethod_callTimeoutMillis_0 = env->GetMethodID(state.sClazz, "callTimeoutMillis", "()I");
            JENNY_CHECK_NULL(state.sMethod_callTimeoutMillis_0);
            state.sMethod_connectTimeoutMillis_0 = env->GetMethodID(state.sClazz, "connectTimeoutMillis", "()I");
            JENNY_CHECK_NULL(state.sMethod_connectTimeoutMillis_0);
            state.sMethod_readTimeoutMillis_0 = env->GetMethodID(state.sClazz, "readTimeoutMillis", "()I");
            JENNY_CHECK_NULL(state.sMethod_readTimeoutMillis_0);
            state.sMethod_writeTimeoutMillis_0 = env->GetMethodID(state.sClazz, "writeTimeoutMillis", "()I");
            JENNY_CHECK_NULL(state.sMethod_writeTimeoutMillis_0);
            state.sMethod_pingIntervalMillis_0 = env->GetMethodID(state.sClazz, "pingIntervalMillis", "()I");
            JENNY_CHECK_NULL(state.sMethod_pingIntervalMillis_0);
            state.sMethod_proxy_0 = env->GetMethodID(state.sClazz, "proxy", "()Ljava/net/Proxy;");
            JENNY_CHECK_NULL(state.sMethod_proxy_0);
            state.sMethod_proxySelector_0 = env->GetMethodID(state.sClazz, "proxySelector", "()Ljava/net/ProxySelector;");
            JENNY_CHECK_NULL(state.sMethod_proxySelector_0);
            state.sMethod_cookieJar_0 = env->GetMethodID(state.sClazz, "cookieJar", "()Lokhttp3/CookieJar;");
            JENNY_CHECK_NULL(state.sMethod_cookieJar_0);
            state.sMethod_cache_0 = env->GetMethodID(state.sClazz, "cache", "()Lokhttp3/Cache;");
            JENNY_CHECK_NULL(state.sMethod_cache_0);
            state.sMethod_dns_0 = env->GetMethodID(state.sClazz, "dns", "()Lokhttp3/Dns;");
            JENNY_CHECK_NULL(state.sMethod_dns_0);
            state.sMethod_socketFactory_0 = env->GetMethodID(state.sClazz, "socketFactory", "()Ljavax/net/SocketFactory;");
            JENNY_CHECK_NULL(state.sMethod_socketFactory_0);
            state.sMethod_sslSocketFactory_0 = env->GetMethodID(state.sClazz, "sslSocketFactory", "()Ljavax/net/ssl/SSLSocketFactory;");
            JENNY_CHECK_NULL(state.sMethod_sslSocketFactory_0);
            state.sMethod_hostnameVerifier_0 = env->GetMethodID(state.sClazz, "hostnameVerifier", "()Ljavax/net/ssl/HostnameVerifier;");
            JENNY_CHECK_NULL(state.sMethod_hostnameVerifier_0);
            state.sMethod_certificatePinner_0 = env->GetMethodID(state.sClazz, "certificatePinner", "()Lokhttp3/CertificatePinner;");
            JENNY_CHECK_NULL(state.sMethod_certificatePinner_0);
            state.sMethod_authenticator_0 = env->GetMethodID(state.sClazz, "authenticator", "()Lokhttp3/Authenticator;");
            JENNY_CHECK_NULL(state.sMethod_authenticator_0);
            state.sMethod_proxyAuthenticator_0 = env->GetMethodID(state.sClazz, "proxyAuthenticator", "()Lokhttp3/Authenticator;");
            JENNY_CHECK_NULL(state.sMethod_proxyAuthenticator_0);
            state.sMethod_connectionPool_0 = env->GetMethodID(state.sClazz, "connectionPool", "()Lokhttp3/ConnectionPool;");
            JENNY_CHECK_NULL(state.sMethod_connectionPool_0);
            state.sMethod_followSslRedirects_0 = env->GetMethodID(state.sClazz, "followSslRedirects", "()Z");
            JENNY_CHECK_NULL(state.sMethod_followSslRedirects_0);
            state.sMethod_followRedirects_0 = env->GetMethodID(state.sClazz, "followRedirects", "()Z");
            JENNY_CHECK_NULL(state.sMethod_followRedirects_0);
            state.sMethod_retryOnConnectionFailure_0 = env->GetMethodID(state.sClazz, "retryOnConnectionFailure", "()Z");
            JENNY_CHECK_NULL(state.sMethod_retryOnConnectionFailure_0);
            state.sMethod_dispatcher_0 = env->GetMethodID(state.sClazz, "dispatcher", "()Lokhttp3/Dispatcher;");
            JENNY_CHECK_NULL(state.sMethod_dispatcher_0);
            state.sMethod_protocols_0 = env->GetMethodID(state.sClazz, "protocols", "()Ljava/util/List;");
            JENNY_CHECK_NULL(state.sMethod_protocols_0);
            state.sMethod_connectionSpecs_0 = env->GetMethodID(state.sClazz, "connectionSpecs", "()Ljava/util/List;");
            JENNY_CHECK_NULL(state.sMethod_connectionSpecs_0);
            state.sMethod_interceptors_0 = env->GetMethodID(state.sClazz, "interceptors", "()Ljava/util/List;");
            JENNY_CHECK_NULL(state.sMethod_interceptors_0);
            state.sMethod_networkInterceptors_0 = env->GetMethodID(state.sClazz, "networkInterceptors", "()Ljava/util/List;");
            JENNY_CHECK_NULL(state.sMethod_networkInterceptors_0);
            state.sMethod_eventListenerFactory_0 = env->GetMethodID(state.sClazz, "eventListenerFactory", "()Lokhttp3/EventListener$Factory;");
            JENNY_CHECK_NULL(state.sMethod_eventListenerFactory_0);
            state.sMethod_newCall_0 = env->GetMethodID(state.sClazz, "newCall", "(Lokhttp3/Request;)Lokhttp3/Call;");
            JENNY_CHECK_NULL(state.sMethod_newCall_0);
            state.sMethod_newWebSocket_0 = env->GetMethodID(state.sClazz, "newWebSocket", "(Lokhttp3/Request;Lokhttp3/WebSocketListener;)Lokhttp3/WebSocket;");
            JENNY_CHECK_NULL(state.sMethod_newWebSocket_0);
            state.sMethod_newBuilder_0 = env->GetMethodID(state.sClazz, "newBuilder", "()Lokhttp3/OkHttpClient$Builder;");
            JENNY_CHECK_NULL(state.sMethod_newBuilder_0);


            state.sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ inline void OkHttpClientProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (state.sInited) {
            env->DeleteGlobalRef(state.sClazz);
            state.sClazz = nullptr;
            state.sInited = false;
        }
    }
}


} // end of namespace java
} // end of namespace okhttp
