/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#include <jni.h>
#include <assert.h>
#include <atomic>
#include <mutex>

#include "jnigen/jni_helper.h"

// external logger function
void jennySampleErrorLog(JNIEnv* env, const char* error);


namespace java {
namespace okhttp {
class ResponseProxy {

public:
    static constexpr auto FULL_CLASS_NAME = u8"okhttp3/Response";


public:
    static bool initClazz(JNIEnv* env);

    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }


    // method: public okhttp3.Request request()
    static jobject request(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_request_0);
    }

    // method: public okhttp3.Protocol protocol()
    static jobject protocol(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_protocol_0);
    }

    // method: public int code()
    static jint code(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_code_0);
    }

    // method: public boolean isSuccessful()
    static jboolean isSuccessful(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_isSuccessful_0);
    }

    // method: public java.lang.String message()
    static jstring message(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_message_0));
    }

    // method: public okhttp3.Handshake handshake()
    static jobject handshake(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_handshake_0);
    }

    // method: public java.util.List<java.lang.String> headers(java.lang.String name)
    static jobject headers(JNIEnv* env, jobject thiz, jstring name) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_headers_0, name);
    }

    // method: public okhttp3.Headers headers()
    static jobject headers(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_headers_1);
    }

    // method: public java.lang.String header(java.lang.String name)
    static jstring header(JNIEnv* env, jobject thiz, jstring name) {
        assertInited(env);
        return reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_header_0, name));
    }

    // method: public java.lang.String header(java.lang.String name, java.lang.String defaultValue)
    static jstring header(JNIEnv* env, jobject thiz, jstring name, jstring defaultValue) {
        assertInited(env);
        return reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_header_1, name, defaultValue));
    }

    // method: public okhttp3.Headers trailers()
    static jobject trailers(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_trailers_0);
    }

    // method: public okhttp3.ResponseBody peekBody(long byteCount)
    static jobject peekBody(JNIEnv* env, jobject thiz, jlong byteCount) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_peekBody_0, byteCount);
    }

    // method: public okhttp3.ResponseBody body()
    static jobject body(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_body_0);
    }

    // method: public okhttp3.Response.Builder newBuilder()
    static jobject newBuilder(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_newBuilder_0);
    }

    // method: public boolean isRedirect()
    static jboolean isRedirect(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_isRedirect_0);
    }

    // method: public okhttp3.Response networkResponse()
    static jobject networkResponse(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_networkResponse_0);
    }

    // method: public okhttp3.Response cacheResponse()
    static jobject cacheResponse(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_cacheResponse_0);
    }

    // method: public okhttp3.Response priorResponse()
    static jobject priorResponse(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_priorResponse_0);
    }

    // method: public java.util.List<okhttp3.Challenge> challenges()
    static jobject challenges(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_challenges_0);
    }

    // method: public okhttp3.CacheControl cacheControl()
    static jobject cacheControl(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallObjectMethod(thiz, getClassInitState().sMethod_cacheControl_0);
    }

    // method: public long sentRequestAtMillis()
    static jlong sentRequestAtMillis(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallLongMethod(thiz, getClassInitState().sMethod_sentRequestAtMillis_0);
    }

    // method: public long receivedResponseAtMillis()
    static jlong receivedResponseAtMillis(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallLongMethod(thiz, getClassInitState().sMethod_receivedResponseAtMillis_0);
    }

    // method: public void close()
    static void close(JNIEnv* env, jobject thiz) {
        assertInited(env);
        env->CallVoidMethod(thiz, getClassInitState().sMethod_close_0);
    }

    // method: public java.lang.String toString()
    static jstring toString(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_toString_0));
    }



private:
    ::jenny::LocalRef<jobject> _local;
    ::jenny::GlobalRef<jobject> _global;

public:
    ::jenny::LocalRef<jobject> getThis(bool owned = true) const {
        if (_local) {
            if (owned) {
                return _local;
            } else {
                return ::jenny::LocalRef<jobject>(_local.get(), false);
            }
        } else {
            return _global.toLocal();
        }
    }

    // jni helper constructors
    ResponseProxy(jobject ref, bool owned = false): _local(ref, owned) {
       assertInited(::jenny::Env().get());
    }

    ResponseProxy(::jenny::LocalRef<jobject> ref): _local(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }

    ResponseProxy(::jenny::GlobalRef<jobject> ref): _global(std::move(ref)) {
       assertInited(::jenny::Env().get());
    }


    // method: public okhttp3.Request request()
    ::jenny::LocalRef<jobject> request() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_request_0));
    }

    // method: public okhttp3.Protocol protocol()
    ::jenny::LocalRef<jobject> protocol() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_protocol_0));
    }

    // method: public int code()
    jint code() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_code_0);
    }

    // method: public boolean isSuccessful()
    jboolean isSuccessful() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_isSuccessful_0);
    }

    // method: public java.lang.String message()
    ::jenny::LocalRef<jstring> message() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jstring>(reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_message_0)));
    }

    // method: public okhttp3.Handshake handshake()
    ::jenny::LocalRef<jobject> handshake() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_handshake_0));
    }

    // method: public java.util.List<java.lang.String> headers(java.lang.String name)
    ::jenny::LocalRef<jobject> headers(const ::jenny::LocalRef<jstring>& name) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_headers_0, name.get()));
    }

    // method: public okhttp3.Headers headers()
    ::jenny::LocalRef<jobject> headers() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_headers_1));
    }

    // method: public java.lang.String header(java.lang.String name)
    ::jenny::LocalRef<jstring> header(const ::jenny::LocalRef<jstring>& name) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jstring>(reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_header_0, name.get())));
    }

    // method: public java.lang.String header(java.lang.String name, java.lang.String defaultValue)
    ::jenny::LocalRef<jstring> header(const ::jenny::LocalRef<jstring>& name, const ::jenny::LocalRef<jstring>& defaultValue) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jstring>(reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_header_1, name.get(), defaultValue.get())));
    }

    // method: public okhttp3.Headers trailers()
    ::jenny::LocalRef<jobject> trailers() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_trailers_0));
    }

    // method: public okhttp3.ResponseBody peekBody(long byteCount)
    ::jenny::LocalRef<jobject> peekBody(jlong byteCount) const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_peekBody_0, byteCount));
    }

    // method: public okhttp3.ResponseBody body()
    ::jenny::LocalRef<jobject> body() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_body_0));
    }

    // method: public okhttp3.Response.Builder newBuilder()
    ::jenny::LocalRef<jobject> newBuilder() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_newBuilder_0));
    }

    // method: public boolean isRedirect()
    jboolean isRedirect() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallBooleanMethod(thiz, getClassInitState().sMethod_isRedirect_0);
    }

    // method: public okhttp3.Response networkResponse()
    ::jenny::LocalRef<jobject> networkResponse() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_networkResponse_0));
    }

    // method: public okhttp3.Response cacheResponse()
    ::jenny::LocalRef<jobject> cacheResponse() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_cacheResponse_0));
    }

    // method: public okhttp3.Response priorResponse()
    ::jenny::LocalRef<jobject> priorResponse() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_priorResponse_0));
    }

    // method: public java.util.List<okhttp3.Challenge> challenges()
    ::jenny::LocalRef<jobject> challenges() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_challenges_0));
    }

    // method: public okhttp3.CacheControl cacheControl()
    ::jenny::LocalRef<jobject> cacheControl() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jobject>(env->CallObjectMethod(thiz, getClassInitState().sMethod_cacheControl_0));
    }

    // method: public long sentRequestAtMillis()
    jlong sentRequestAtMillis() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallLongMethod(thiz, getClassInitState().sMethod_sentRequestAtMillis_0);
    }

    // method: public long receivedResponseAtMillis()
    jlong receivedResponseAtMillis() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return env->CallLongMethod(thiz, getClassInitState().sMethod_receivedResponseAtMillis_0);
    }

    // method: public void close()
    void close() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        env->CallVoidMethod(thiz, getClassInitState().sMethod_close_0);
    }

    // method: public java.lang.String toString()
    ::jenny::LocalRef<jstring> toString() const {
        ::jenny::Env env;
        ::jenny::LocalRef<jobject> jennyLocalRef = getThis(false);
        jobject thiz = jennyLocalRef.get();
        return ::jenny::LocalRef<jstring>(reinterpret_cast<jstring>(env->CallObjectMethod(thiz, getClassInitState().sMethod_toString_0)));
    }



private:
    struct ClassInitState {
        // thread safe init
        std::atomic_bool sInited {};
        std::mutex sInitLock {};
        jclass sClazz = nullptr;


        jmethodID sMethod_request_0 = nullptr;
        jmethodID sMethod_protocol_0 = nullptr;
        jmethodID sMethod_code_0 = nullptr;
        jmethodID sMethod_isSuccessful_0 = nullptr;
        jmethodID sMethod_message_0 = nullptr;
        jmethodID sMethod_handshake_0 = nullptr;
        jmethodID sMethod_headers_0 = nullptr;
        jmethodID sMethod_headers_1 = nullptr;
        jmethodID sMethod_header_0 = nullptr;
        jmethodID sMethod_header_1 = nullptr;
        jmethodID sMethod_trailers_0 = nullptr;
        jmethodID sMethod_peekBody_0 = nullptr;
        jmethodID sMethod_body_0 = nullptr;
        jmethodID sMethod_newBuilder_0 = nullptr;
        jmethodID sMethod_isRedirect_0 = nullptr;
        jmethodID sMethod_networkResponse_0 = nullptr;
        jmethodID sMethod_cacheResponse_0 = nullptr;
        jmethodID sMethod_priorResponse_0 = nullptr;
        jmethodID sMethod_challenges_0 = nullptr;
        jmethodID sMethod_cacheControl_0 = nullptr;
        jmethodID sMethod_sentRequestAtMillis_0 = nullptr;
        jmethodID sMethod_receivedResponseAtMillis_0 = nullptr;
        jmethodID sMethod_close_0 = nullptr;
        jmethodID sMethod_toString_0 = nullptr;

    }; // endof struct ClassInitState

    static inline ClassInitState& getClassInitState() {
        static ClassInitState classInitState;
        return classInitState;
    }

};


/*static*/ inline bool ResponseProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init ResponseProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (!state.sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(state.sClazz);


            state.sMethod_request_0 = env->GetMethodID(state.sClazz, "request", "()Lokhttp3/Request;");
            JENNY_CHECK_NULL(state.sMethod_request_0);
            state.sMethod_protocol_0 = env->GetMethodID(state.sClazz, "protocol", "()Lokhttp3/Protocol;");
            JENNY_CHECK_NULL(state.sMethod_protocol_0);
            state.sMethod_code_0 = env->GetMethodID(state.sClazz, "code", "()I");
            JENNY_CHECK_NULL(state.sMethod_code_0);
            state.sMethod_isSuccessful_0 = env->GetMethodID(state.sClazz, "isSuccessful", "()Z");
            JENNY_CHECK_NULL(state.sMethod_isSuccessful_0);
            state.sMethod_message_0 = env->GetMethodID(state.sClazz, "message", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_message_0);
            state.sMethod_handshake_0 = env->GetMethodID(state.sClazz, "handshake", "()Lokhttp3/Handshake;");
            JENNY_CHECK_NULL(state.sMethod_handshake_0);
            state.sMethod_headers_0 = env->GetMethodID(state.sClazz, "headers", "(Ljava/lang/String;)Ljava/util/List;");
            JENNY_CHECK_NULL(state.sMethod_headers_0);
            state.sMethod_headers_1 = env->GetMethodID(state.sClazz, "headers", "()Lokhttp3/Headers;");
            JENNY_CHECK_NULL(state.sMethod_headers_1);
            state.sMethod_header_0 = env->GetMethodID(state.sClazz, "header", "(Ljava/lang/String;)Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_header_0);
            state.sMethod_header_1 = env->GetMethodID(state.sClazz, "header", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_header_1);
            state.sMethod_trailers_0 = env->GetMethodID(state.sClazz, "trailers", "()Lokhttp3/Headers;");
            JENNY_CHECK_NULL(state.sMethod_trailers_0);
            state.sMethod_peekBody_0 = env->GetMethodID(state.sClazz, "peekBody", "(J)Lokhttp3/ResponseBody;");
            JENNY_CHECK_NULL(state.sMethod_peekBody_0);
            state.sMethod_body_0 = env->GetMethodID(state.sClazz, "body", "()Lokhttp3/ResponseBody;");
            JENNY_CHECK_NULL(state.sMethod_body_0);
            state.sMethod_newBuilder_0 = env->GetMethodID(state.sClazz, "newBuilder", "()Lokhttp3/Response$Builder;");
            JENNY_CHECK_NULL(state.sMethod_newBuilder_0);
            state.sMethod_isRedirect_0 = env->GetMethodID(state.sClazz, "isRedirect", "()Z");
            JENNY_CHECK_NULL(state.sMethod_isRedirect_0);
            state.sMethod_networkResponse_0 = env->GetMethodID(state.sClazz, "networkResponse", "()Lokhttp3/Response;");
            JENNY_CHECK_NULL(state.sMethod_networkResponse_0);
            state.sMethod_cacheResponse_0 = env->GetMethodID(state.sClazz, "cacheResponse", "()Lokhttp3/Response;");
            JENNY_CHECK_NULL(state.sMethod_cacheResponse_0);
            state.sMethod_priorResponse_0 = env->GetMethodID(state.sClazz, "priorResponse", "()Lokhttp3/Response;");
            JENNY_CHECK_NULL(state.sMethod_priorResponse_0);
            state.sMethod_challenges_0 = env->GetMethodID(state.sClazz, "challenges", "()Ljava/util/List;");
            JENNY_CHECK_NULL(state.sMethod_challenges_0);
            state.sMethod_cacheControl_0 = env->GetMethodID(state.sClazz, "cacheControl", "()Lokhttp3/CacheControl;");
            JENNY_CHECK_NULL(state.sMethod_cacheControl_0);
            state.sMethod_sentRequestAtMillis_0 = env->GetMethodID(state.sClazz, "sentRequestAtMillis", "()J");
            JENNY_CHECK_NULL(state.sMethod_sentRequestAtMillis_0);
            state.sMethod_receivedResponseAtMillis_0 = env->GetMethodID(state.sClazz, "receivedResponseAtMillis", "()J");
            JENNY_CHECK_NULL(state.sMethod_receivedResponseAtMillis_0);
            state.sMethod_close_0 = env->GetMethodID(state.sClazz, "close", "()V");
            JENNY_CHECK_NULL(state.sMethod_close_0);
            state.sMethod_toString_0 = env->GetMethodID(state.sClazz, "toString", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_toString_0);


            state.sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ inline void ResponseProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (state.sInited) {
            env->DeleteGlobalRef(state.sClazz);
            state.sClazz = nullptr;
            state.sInited = false;
        }
    }
}


} // end of namespace java
} // end of namespace okhttp
